---
layout: post
title: "인증"
subtitle: "현대 암호"
categories: devlog
tags: security
---

## 인증

## MAC(Message Authentication Code)
전송되는 메시지의 무결성을 확인하고, 메시지를 인증하기 위해 메시지에 붙여 보내는 작은 데이터 블록이다.  
고정된 비트길이의 출력을 계산한다.    

### 메시지 인증코드 전송 방법
A가 B에게 메시지를 보낸 후, 비밀키와 메시지 인증코드를 이용해 MAC값을 만들어 MAC을 보낸다. B는 메시지 인증코드와 가지고 있는 비밀키를 이용해 MAC값을 만들고, A로부터 받은 MAC값과 비교해서 인증한다. 

### 메시지 인증코드 구현 방법


#### 대칭 암호 이용 -1  
1. 메시지를 일방향 해시함수를 이용해 사이즈를 줄인 해시값을 만든다.
2. 해시값을 비밀키로 암호화해 암호화한 해시값을 만든다..
3. 서 전송한다.

#### 대칭 암호 이용 -2  
1. 메시지를 블록으로 나눈다.
2. CBC모드로 암호화를 진행한다. 
3. 마지막 암호문 블록을 제외한 나머지 암호문 블록을 모두 버린다.   
암호문 블록은 이전 암호문 블록을 키로 사용하기 때문에 마지막 암호문 블록만 사용해도 충분하다.

#### 일방향 해시함수 이용
1. 메시지와 사전에 A와 B가 나누어 가진 비밀값을 연결해 해시값을 만든다.
2. B는 받은 메시지를 비밀값과 연결하고, 받은 해시값과 만든 해시값을 비교한다.    

#### 전용 알고리즘 `HMAC`
메시지와 키와 전용알고리즘을 이용해 MAC값을 만들어 사용한다.


### MAC에 대한 공격
#### 키 추측 공격
전사공격방법   
키를 추측 당하지 않게 강한 의사난수 생성기를 사용해야한다.

#### 재전송 공격
A가 B에게 보낸 메시지와 MAC값을 도청해 보존하고 있다가 나중에 B에게 보존했던 메시지와 MAC값을 다시 보내 B가 A에게 돈을 전송하게 한다.    
이를 막기 위해 메시지에 `순서 번호`, `타임 스탬프`, `비표`를 추가로 넣어 재전송에 대해 인증이 불가능하게 한다.

### MAC의 한계
메시지 인증코드를 사용해 메시지의 변경과 거짓 행세를 검출할 수는 있지만, `제 3자 인증`과 `부인 방지`에 대해서는 인증이 불가능하다.   
#### 제 3자에게 증명하기
제 3자에게 A가 B에게 보냈다는 것을 증명할 수 없다.   
#### 부인 방지
`A가 B에게 보낸 메시지`는 B가 스스로 만들 수 있으므로, A가 보냈다는 것을 증명할 수 없다.   

## 디지털 서명
오프라인에서의 `서명`의 특징을 전자적으로 구현한 것이다.

### 요구사항
- 인증: 누가 서명했는지 확인할 수 있어야 한다.
- 위조불가: 위조가 불가능해야 한다.
- 재사용불가: 서명을 다시 사용할 수 없어야 한다.(A서류에 한 서명을 복사해 B서류에 사용할 수 없음.)
- 변경불가: 서명된 문서의 내용을 변경할 수 없어야 한다.
- 부인방지: 나중에 부인할 수 없어야 한다.

---

### 디지털 서명 사용 방법
- 서명은 메시지에 대한 자신의 동의이다.(자신만이 할 수 있다.)
- 서명의 검증은 모두가 할 수 있어야한다.    

즉 공개키 암호 방식을 이용해 `개인키`로 `디지털 서명`을 만들어 사용하고, `공개키`로 서명을 복호하해서 서명이 올바른지 확인한다.     
공개키 암호 방식은 속도가 느리므로, 해시함수를 이용해 메시지의 해시값을 만들고, 해시값으로 서명을 하고, 복호하하는 방식을 사용한다. 

1. A가 `개인키와 공개키`를 만들고, `공개키`를 B에게 전송한다.
2. A가 메시지를 해시함수를 통해 `해시값`을 만든다.
3. A가 `해시값`을 `개인키`로 암호화해 `서명`을 만든다. 
4. A가 B에게 `메시지와 서명`을 전송한다.
5. B는 `서명`을 `공개키`로 복호화해 `복호화한 해시값`을 만든다.
6. B는 메시지를 해시함수를 통해 `해시값`을 만든다.
7. B는 `해시값`과 `복호화한 해시값`을 비교해 올바른 메시지인지 인증할 수 있다.


---

### 디지털 서명의 종류
공개키 암호인 `RSA`, `ElGamal`, `Rabin` -> 공개키 방식, 디지털 서명에 사용가능   
서명 알고리즘인 `DSA(Digital Signature Algorithm)` -> 디지털 서명에만 사용가능


---

### 디지털 서명의 문제
공개키방식을 이용하므로 송신자의 공개키가 진짜인지 판별할 수 없다.   
-> 공개키에 대한 `인증서`를 만듦.


---

## 인증서
신뢰가능한 `인증기관`에 `공개키에 대한 인증서`를 제공한다.

### 포함되는 내용
- 이름
- 소속
- 메일주소 등의 개인 정보
- 공개 키
- 인증기관의 디지털 서명


### 인증서의 종류
#### 공인 인증서  
민증, 여권 등 전국에서 인증, 사용 가능하다.  
신분 확인 절차를 통해 본인 인증 후 발급 가능하다. 
#### 개인 인증서
도서관카드, 학생증, 사원증 등 개별 기관에서 인증, 사용할 수 있다.

---

### 암호기술
|       |     대칭암호     |    공개키 암호     |
| :---: | :----------: | :-----------: |
|  송신자  | 비밀키를 이용해 암호화 | 수신자의 공개키로 암호화 |
|  수신자  | 비밀키를 이용해 복호화 | 수신자의 개인키로 복호화 |
|  키배송  |     문제 O     |     문제 x      |

<br>

### 인증 기술
|       |    메시지 인증코드     |        디지털 서명        |
| :---: | :-------------: | :------------------: |
|  송신자  |  수신자와 공유한 비밀값   | 송신자의 개인키로 암호화해 서명 작성 |
|  수신자  |  송신자와 공유한 비밀값   | 송신자의 공개키로 복호화해 서명 검증 |
|  키배송  |      문제 O       |         문제 x         |
|  무결성  |        O        |          O           |
|  인증   | O(송신자), x(제 3자) |     O(송신자, 제 3자)     |
| 부인방지  |        x        |          O           |










